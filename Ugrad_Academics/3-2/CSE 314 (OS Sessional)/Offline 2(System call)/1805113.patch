diff --git a/Makefile b/Makefile
index 39a99d7..7d96bd8 100644
--- a/Makefile
+++ b/Makefile
@@ -125,6 +125,8 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_trace\
+	$U/_sysinfotest\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..92796d1 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             get_free_memory(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);
+int             get_N_proc(void);  
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..55837e0 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,35 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+
+//for system info(getting free memory in bytes)
+int get_free_memory(void)
+{
+    int page_count = 0;
+
+    struct run *free_list;
+
+    acquire(&kmem.lock);
+
+    free_list = kmem.freelist;
+
+    while (free_list != 0) { //'0' means "null"
+
+        page_count += 1;
+
+        free_list = free_list->next;
+
+    }
+
+    release(&kmem.lock);
+
+    int total_free_memory_in_byte = page_count * 4096; //1 page = 4kB
+    return total_free_memory_in_byte;
+    
+
+
+}
+
+
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..38a4f1e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -155,6 +155,7 @@ found:
 static void
 freeproc(struct proc *p)
 {
+
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
@@ -169,6 +170,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tracing_system_call_number = 0; //free the "tracing_system_call_number" value
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -681,3 +683,54 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+//for tracing
+int trace(int Tracing_system_call_number)
+{
+
+
+    struct proc *p = myproc();
+
+   //Remembering the "system_call_number" which we want to trace
+
+    if(Tracing_system_call_number >= 1 && Tracing_system_call_number <= 21 )
+        p->tracing_system_call_number = Tracing_system_call_number;
+    else
+    	return -1;    
+
+     
+    return 1;  
+
+
+   
+ 
+}
+
+
+//for system info(getting num of existing process)
+
+int get_N_proc(void)
+{
+   int existing_process_count = 0;
+   struct proc *p;
+   for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    
+      if(p->state != UNUSED){
+        // Wake process from sleep().
+        existing_process_count++;
+      }
+     
+    release(&p->lock);
+  }
+  
+  return existing_process_count;
+
+}
+
+
+
+
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3fd43b1 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tracing_system_call_number; //for tracing
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..a7cc115 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,15 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
+//creating array of syscall names
+//starting array index = 1
+char *syscall_names[]={"","fork","exit","wait","pipe","read","kill","exec","fstat","chdir",
+                   "dup","getpid","sbrk","sleep","uptime","open","write","mknod",
+                       "unlink","link","mkdir","close","trace","info"};
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +135,36 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo]    sys_sysinfo,
 };
 
 void
 syscall(void)
 {
+
   int num;
   struct proc *p = myproc();
+  
+ 
 
   num = p->trapframe->a7;
+  //if(num == 22)
+  //{ printf("Here1\n"); }
+  
+  
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    
+    //for tracing
+    if(p->tracing_system_call_number == num)
+    {
+       printf("pid: %d, syscall: %s, return value: %d\n",p-> pid,syscall_names[num],p->trapframe->a0);
+    
+    }
+    
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c9025c8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..ee931e1 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -75,6 +75,7 @@ sys_kill(void)
 
   argint(0, &pid);
   return kill(pid);
+  
 }
 
 // return how many clock tick interrupts have occurred
@@ -89,3 +90,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//for tracing
+uint64
+sys_trace(void)
+{
+// printf("Here2\n");
+  int n;
+  argint(0,&n);
+  
+  return trace(n);
+}
+
+//for system_info
+uint64
+sys_sysinfo(void)
+{
+   printf("\nsysinfo system call prints:\n");   
+   printf("free memory: %d bytes\n",get_free_memory());
+   printf("nproc  : %d\n\n",get_N_proc());
+   
+   return 0;
+}
+
+
diff --git a/user/user.h b/user/user.h
index 4d398d5..f56cb35 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int); //for tracing
+int sysinfo(void);//for knowing system info
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
